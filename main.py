import os
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LAST_PERIOD, CYCLE_LENGTH = range(2)

class CycleTracker:
    def __init__(self):
        self.user_data = {}
    
    def calculate_dates(self, last_period, cycle_length=28):
        """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç —Ü–∏–∫–ª–∞"""
        next_period = last_period + timedelta(days=cycle_length)
        ovulation = next_period - timedelta(days=14)
        fertile_start = ovulation - timedelta(days=5)
        fertile_end = ovulation
        pms_start = next_period - timedelta(days=7)
        
        return {
            'next_period': next_period,
            'ovulation': ovulation,
            'fertile_start': fertile_start,
            'fertile_end': fertile_end,
            'pms_start': pms_start
        }

tracker = CycleTracker()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª', 'üìä –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª'],
        ['üîÆ –ü—Ä–æ–≥–Ω–æ–∑', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = """
üå∏ *–¢—Ä–µ–∫–µ—Ä –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞*

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
‚Ä¢ –î–∞—Ç—ã –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ üìÖ
‚Ä¢ –û–≤—É–ª—è—Ü–∏—é ü•ö
‚Ä¢ –§–µ—Ä—Ç–∏–ª—å–Ω—ã–µ –¥–Ω–∏ üë∂
‚Ä¢ –ü–ú–° –ø–µ—Ä–∏–æ–¥ üåô

*–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª"*

‚ö†Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.*
    """
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def start_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024",
        parse_mode='Markdown'
    )
    return LAST_PERIOD

async def last_period_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = update.message.text
        last_period = datetime.strptime(date_str, '%d.%m.%Y')
        context.user_data['last_period'] = last_period
        
        await update.message.reply_text(
            "üìä *–ö–∞–∫–æ–≤–∞ –¥–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞?*\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 28):",
            parse_mode='Markdown'
        )
        return CYCLE_LENGTH
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return LAST_PERIOD

async def cycle_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cycle_len = int(update.message.text) if update.message.text.isdigit() else 28
        last_period = context.user_data['last_period']
        
        dates = tracker.calculate_dates(last_period, cycle_len)
        
        response = f"""
üìã *–í–∞—à —Ü–∏–∫–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:*

üóì *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ:* {last_period.strftime('%d.%m.%Y')}
üìÖ *–°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ:* {dates['next_period'].strftime('%d.%m.%Y')}
ü•ö *–û–≤—É–ª—è—Ü–∏—è:* {dates['ovulation'].strftime('%d.%m.%Y')}
üë∂ *–§–µ—Ä—Ç–∏–ª—å–Ω—ã–µ –¥–Ω–∏:* {dates['fertile_start'].strftime('%d.%m.%Y')} - {dates['fertile_end'].strftime('%d.%m.%Y')}
üåô *–ü–ú–° –ø–µ—Ä–∏–æ–¥:* —Å {dates['pms_start'].strftime('%d.%m.%Y')}
        """
        
        await update.message.reply_text(response, parse_mode='Markdown')
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'last_period' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 'üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª'")
        return
    
    last_period = context.user_data['last_period']
    cycle_len = context.user_data.get('cycle_length', 28)
    dates = tracker.calculate_dates(last_period, cycle_len)
    
    today = datetime.now().date()
    days_until_period = (dates['next_period'].date() - today).days
    
    stats_text = f"""
üìà *–¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª:*

‚úÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ:* {last_period.strftime('%d.%m.%Y')}
üìÖ *–°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ:* {dates['next_period'].strftime('%d.%m.%Y')}
‚è≥ *–î–æ —Å–ª–µ–¥—É—é—â–∏—Ö:* {days_until_period} –¥–Ω–µ–π

ü•ö *–û–≤—É–ª—è—Ü–∏—è:* {dates['ovulation'].strftime('%d.%m.%Y')}
üë∂ *–§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ:* {dates['fertile_start'].strftime('%d.%m.%Y')} - {dates['fertile_end'].strftime('%d.%m.%Y')}
    """
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å*

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏—Ç–µ "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª"
2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª

*–ö–æ–º–∞–Ω–¥—ã:*
üìä –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã
üîÆ –ü—Ä–æ–≥–Ω–æ–∑ - —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã

üíñ *–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ!*
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    application = Application.builder().token(os.environ['BOT_TOKEN']).build()
    
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª)$'), start_tracking)],
        states={
            LAST_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, last_period_date)],
            CYCLE_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, cycle_length)],
        },
        fallbacks=[]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^(üìä –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª)$'), show_stats))
    application.add_handler(MessageHandler(filters.Regex('^(‚ÑπÔ∏è –ü–æ–º–æ—â—å)$'), help_command))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
